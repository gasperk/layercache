#summary A quick introduction
#labels Featured

= Introduction =
LayerCache is a simple caching framework which allows you to easily plug in layered caching with your application.

= Description =


= Example =
Source classes:
{{{
class UserProfileSource
{
  protected $db;
  
  function __construct($db)
  {
    $this->db = $db;
  }
  
  function normalizeKey($key)
  {
    return "userprofile/" . $key;
  }

  function get($key)
  {
    return $this->db->query('select * from user_profile where user_id = ' . intval($key));
  }
}

class SomethingCalculated
{
  function normalizeKey($key)
  {
    return "calc-{$key['a']}-{$key['b'}";
  }

  function get($key)
  {
    // perform a calculation
    return $key['a'] * sqrt($key['b']) * (22 / 7);
  }
}
}}}

Prepare cache stacks:
{{{
$database = ... // create a database object to be used with UserProfileSource
$memcache = new Memcache; // prepare a memcache object to be used in a stack

LayerCache::
  forSource(new UserProfileSource($database))->
  addCache(new LayerCache_Cache_Memcache($memcache))->withTTL(3600)->
  addCache(new LayerCache_Cache_APC)->withTTL(600)->
  toStack('UserProfile');

LayerCache::
  forSource(new SomethingCalculated)->
  addCache(new LayerCache_Cache_APC)->withTTL(180)->
  addCache(new LayerCache_Cache_Local)->
  toStack('calculation');
}}}

Now, use the cache stacks:
{{{
$user_profile = LayerCache::stack('UserProfile')->get(43);
$calc = LayerCache::stack('calculation')->get(array('a' => 65, 'b' => 2340);
}}}